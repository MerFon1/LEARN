"""
–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫–≤–∞–¥—Ä–∞—Ç üå∂Ô∏è
–ú–∞–≥–∏—á–µ—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º –ø–æ—Ä—è–¥–∫–∞ nn –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–∞ n \times nn√ón, —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∏–∑ –≤—Å–µ—Ö —á–∏—Å–µ–ª 1, 2, 3, \ldots, n^21,2,3,‚Ä¶,n
2
  —Ç–∞–∫, —á—Ç–æ —Å—É–º–º—ã –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç–æ–ª–±—Ü—É, –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –∏ –∫–∞–∂–¥–æ–π –∏–∑ –¥–≤—É—Ö –¥–∏–∞–≥–æ–Ω–∞–ª–µ–π —Ä–∞–≤–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω–∞—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –º–∞–≥–∏—á–µ—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º.

–§–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ù–∞ –≤—Ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ø–æ–¥–∞—ë—Ç—Å—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ nn ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ, –∑–∞—Ç–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã: nn —Å—Ç—Ä–æ–∫, –ø–æ nn —á–∏—Å–µ–ª –≤ –∫–∞–∂–¥–æ–π, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª–∞–º–∏.

–§–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–æ–ª–∂–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ YES, –µ—Å–ª–∏ –º–∞—Ç—Ä–∏—Ü–∞ —è–≤–ª—è–µ—Ç—Å—è –º–∞–≥–∏—á–µ—Å–∫–∏–º –∫–≤–∞–¥—Ä–∞—Ç–æ–º, –∏ —Å–ª–æ–≤–æ NO –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.

–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ üü¢
Sample Input 1:

3
8 1 6
3 5 7
4 9 2
Sample Output 1:

YES
Sample Input 2:

3
8 2 6
3 5 7
4 9 1
Sample Output 2:

NO
Sample Input 3:

3
4 9 2
3 5 7
8 1 6
Sample Output 3:

YES
"""
n =int(input())
ls = [[int(i) for i in input().split()] for i in range(n)]

def maxim(l):
    result = []
    for i in l:
        result.extend(i)
    return max(result)

def magic_square(list, n):

    for i in list:
        if len(set(i)) == 1:
            return 'NO'
    if maxim(list)!=n**2:
        return 'NO'

    lines = []
    columns = []
    diagonals = []

    for i in list:
        lines.extend([sum(i)])
    if len(set(lines)) != 1:
        return 'NO'

    for i in range(n):
        pr = []
        for j in range(n):
            pr.extend([list[j][i]])
        columns.extend([sum(pr)])
    if len(set(columns)) != 1:
        return 'NO'

    gd = []
    vd = []
    for i in range(n):
        for j in range(n):
            if i == j and j == n - i - 1:
                gd.extend([list[i][j]])
                vd.extend([list[i][j]])
            elif i == j:
                gd.extend([list[i][j]])
            elif j == n - i - 1:
                vd.extend([list[i][j]])
    diagonals.extend([sum(gd)])
    diagonals.extend([sum(vd)])
    if len(set(diagonals)) != 1:
        return 'NO'

    return 'YES'

print(magic_square(ls,n))









